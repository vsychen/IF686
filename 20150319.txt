1. Um paradigma da programação é um modelo de computação que determina o modo como o programador vê e interage com um programa.

2. A programação funcional ve a computação como uma avaliação de funções matemáticas e evita estados e dados mutáveis. A recursão também é uma característica desse paradigma.
A programação imperativa, porém, descreve a computação como uma sequencia de ações e comandos que mudam o estado e as variáveis de um programa.

3. Na programação funcional não há alocação explícita de memória e de variáveis. Isso faz com que não ocorra efeitos colaterais no cálculo da função. Com isso, uma linguagem que utiliza o paradigma de programação funcional oferece transparência referencial.
Os laços, que estão presentes na programação imperativa, mas não estão na funcional, podem ser simulados por meio de recursão.

4. A primeira linguagem de programação funcional foi criada em 1955 (IPL) e a mais popular foi criada em 1958 (LISP). Apesar de terem sido superadas na questão de popularidade pelas linguagens imperativas, as linguagens funcionais continuaram recebendo investimentos até meados dos anos 90, quando as linguagens imperativas se juntaram com as linguagens orientadas a objeto.

5. Algumas grandes empresas que utilizam linguagens funcionais são a Ericsson (Erlang), a Microsoft (F# e C#), o Twitter (utilizando Scala) e a Google.
O Twitter aplicou Scala no seu back-end e a Google ja publicou artigos mostrando o uso do paradigma funcional para armazenar e recuperar dados.